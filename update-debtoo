#!/bin/bash
# update-debtoo v1.1.3 by Nathaniel Greenwell (NTVMB)
# This script is designed exclusively for Debtoo GNU/Linux.
VERSION=1.1.3
REAL_VERSION=1.2.3
REQUEST_REBOOT=0
REQUEST_DIST_UPGRADE=0
NO_REBOOT=0
SOURCE_ONLY=0
BINARY_ONLY=0
NO_COMPILE=0
FORCE_DOWNGRADE=0
. /etc/os-release

# Define functions
update_kernel() {
  echo "Downloading Linux $LINUX_VERSION..."
  curl -o /usr/src/linux-$LINUX_VERSION.tar.xz https://mirrors.edge.kernel.org/pub/linux/kernel/v${K_VERSION_PART[0]}.x/linux-$LINUX_VERSION.tar.xz
  if [ $? -ne 0 ]; then
    echo "Error: Failed to download Linux. If this is due to a HTTP 404 error, an updated version of debtoo-scripts may have fixed this."
    exit 1
  fi
  echo "Untarring Linux $LINUX_VERSION..."
  tar xvf /usr/src/linux-$LINUX_VERSION.tar.xz -C /usr/src/
  echo "Copying current config..."
  cp /usr/src/linux-$(uname -r)/.config /usr/src/linux-$LINUX_VERSION/.config
  if [ $NO_COMPILE -eq 0 ]; then
    echo "Preparing to build Linux..."
    cd /usr/src/linux-$LINUX_VERSION
    make oldconfig
    echo "Building Linux..."
    make
    if [ $? -ne 0 ]; then
      echo "Error: Failed to build Linux."
      exit 1
    fi
    echo "Removing old kernel source code..."
    rm -rvf /usr/src/linux-$(uname -r)
    echo "Installing Linux modules..."
    make modules_install
    echo "Installing Linux..."
    make install
    echo "Cleaning up..."
    rm -f /usr/src/linux-$LINUX_VERSION.tar.xz
    REQUEST_REBOOT=1
  else
    echo "--no-compile option specified. Not installing Linux."
  fi
}

# Parse arguments
for ARG in $@; do
  case $ARG in
    "--no-reboot")
      NO_REBOOT=1
      ;;
    "--source-only"|"-s")
      SOURCE_ONLY=1
      ;;
    "--binary-only"|"-b")
      BINARY_ONLY=1
      ;;
    "--help"|"-h")
      echo "Usage: $0 [OPTIONS]"
      echo "Options:"
      echo "	-s | --source-only - Only update source packages"
      echo "	-b | --binary-only - Only update binary packages"
      echo "	--no-reboot - Do not prompt for reboot"
      echo "	--no-compile - Do not compile source packages (Download and extract only; for building Debtoo ISOs)"
      echo "	--branch=BRANCH - Force downloading from BRANCH (For debugging and building Debtoo ISOs)"
      echo "	-f | --force-downgrade - Force downgrading source packages (This may damage your system if the --no-compile parameter is not specified!)"
      echo "	--help | -h - This help screen"
      echo ""
      echo "File bug reports at https://github.com/ntvmb/debtoo-scripts/issues"
      exit 0
      ;;
    "--no-compile")
      NO_COMPILE=1
      ;;
    "--branch="*)
      if echo $ARG | grep -q reimu; then
        VERSION_ID=1
        VERSION_CODENAME="reimu"
      elif echo $ARG | grep -q testing; then
        VERSION_ID=2
      elif echo $ARG | grep -q unstable; then
        VERSION_ID="unstable"
      else
        echo "Error: Invalid branch."
        echo "Valid options are: reimu, testing, unstable"
        exit 1
      fi
      ;;
    "-f"|"--force-downgrade")
      FORCE_DOWNGRADE=1
      ;;
    *)
      echo "Error: Unknown argument $ARG"
      echo "Usage: $0 [OPTIONS]"
      exit 1
      ;;
  esac
done

# Check for root access
if [ $EUID -ne 0 ]; then
	echo "This script can only be run as root."
	exit 1
fi

if [ $SOURCE_ONLY -eq 1 ] && [ $BINARY_ONLY -eq 1 ]; then
	echo "Error: Source only and binary only arguments cannot be used together."
	exit 2
fi

# Check for updates to installed binary packages
if [ $SOURCE_ONLY -eq 0 ]; then
  echo "Checking for binary package updates..."
  apt update | grep -q "can be upgraded" ; # apt will give a warning saying it doesn't have a stable CLI interface, but in this case it should work just fine.
  if [ $? -eq 0 ]; then
    echo "Checking for packages being kept back..."
    apt --simulate upgrade | grep -q "kept back"
    if [ $? -eq 0 ]; then
      REQUEST_DIST_UPGRADE=1
    fi
    apt -y upgrade
    if [ $? -ne 0 ]; then
      echo "Error: Failed to update binary packages"
      exit 1
    fi
  else
    echo All binary packages are up to date.
  fi
fi

# Retrieve latest versions of source packages
if [ $BINARY_ONLY -eq 0 ]; then
  echo "Retrieving source package list..."
  wget -q -O dist-list https://github.com/ntvmb/debtoo-scripts/raw/master/dist-list
  . ./dist-list || exit 1
  case $BRANCH in
    "stable")
      curl -o ./srcpackagelist-debtoo https://raw.githubusercontent.com/ntvmb/debtoo-scripts/master/srcpackagelist-$VERSION_CODENAME
      ;;
    "testing")
      curl -o ./srcpackagelist-debtoo https://raw.githubusercontent.com/ntvmb/debtoo-scripts/master/srcpackagelist-testing
      ;;
    "unstable")
      curl -o ./srcpackagelist-debtoo https://raw.githubusercontent.com/ntvmb/debtoo-scripts/master/srcpackagelist-unstable
      ;;
    *)
      # Assume unstable
      echo "Warning: Could not detect release branch. Assuming unstable. Please check your /etc/os-release file."
      BRANCH=unstable
      curl -o ./srcpackagelist-debtoo https://raw.githubusercontent.com/ntvmb/debtoo-scripts/master/srcpackagelist-unstable
      ;;
  esac
  # Redundant error checking
  if [ $? -ne 0 ]; then
    echo "Error: Failed to get source package list"
    exit 1
  fi
fi

if [ $BINARY_ONLY -eq 0 ]; then
	. ./srcpackagelist-debtoo ; # Import source package versions from the list
else
	LINUX_VERSION=$(uname -r)
	LINUX_FIRMWARE_VERSION=null
	SUDO_VERSION=null
	SYSVINIT_VERSION=null
	DEBTOO_SCRIPTS_VERSION=null
fi

# Does the kernel need updated?
# We need to split the string to also check if the current kernel is newer than the distribution's kernel
readarray -d . -t K_VERSION_PART <<< $LINUX_VERSION
readarray -d . -t C_K_VERSION_PART <<< $(uname -r)
if [ $BINARY_ONLY -eq 0 ] && [ ${K_VERSION_PART[0]} -gt ${C_K_VERSION_PART[0]} ] || [ ${K_VERSION_PART[1]} -gt ${C_K_VERSION_PART[1]} ] || [ $(echo ${K_VERSION_PART[2]} | head -n 1) -gt $(echo ${C_K_VERSION_PART[2]} | head -n 1) ] || [ $FORCE_DOWNGRADE -eq 1 ]; then
  update_kernel
else
  if [ $BINARY_ONLY -eq 0 ]; then
    if [[ $(uname -r) =~ "-" ]]; then
      echo Debian distribution kernel detected. Forcing kernel update...
      update_kernel
    else
      echo "Linux is up to date."
    fi
  fi
fi
# Does linux-firmware need to be updated?
if [ $BINARY_ONLY -eq 0 ] && ! [[ $(ls -d /usr/src/linux-firmware-*) =~ $LINUX_FIRMWARE_VERSION ]] || [ $FORCE_DOWNGRADE -eq 1 ]; then
  LINUX_FIRMWARE_OLD=$(ls /usr/src/linux-firmware-*)
  echo "Downloading linux-firmware..."
  curl -o /usr/src/linux-firmware-$LINUX_FIRMWARE_VERSION.tar.xz https://mirrors.edge.kernel.org/pub/linux/kernel/firmware/linux-firmware-$LINUX_FIRMWARE_VERSION.tar.xz
  if [ $? -ne 0 ]; then
    echo "Error: Failed to download linux-firmware."
    exit 1
  fi
  echo "Untarring linux-firmware..."
  tar xvf /usr/src/linux-firmware-$LINUX_FIRMWARE_VERSION.tar.xz -C /usr/src/
  if [ $NO_COMPILE -eq 0 ]; then
    echo "Installing linux-firmware..."
    cd /usr/src/linux-firmware-$LINUX_FIRMWARE_VERSION
    make install
    echo "Cleaning up..."
    rm -rvf $LINUX_FIRMWARE_OLD
    rm -f /usr/src/linux-firmware-$LINUX_FIRMWARE_VERSION.tar.xz
  else
    echo "--no-compile parameter specified. Not installing linux-firmware."
  fi
else
  if [ $BINARY_ONLY -eq 0 ]; then
    echo "linux-firmware is up to date."
  fi
fi
# Does sudo need to be updated?
if [ $BINARY_ONLY -eq 0 ] && ! sudo --version | grep -q $SUDO_VERSION || [ $FORCE_DOWNGRADE -eq 1 ]; then
  SUDO_OLD=$(sudo --version | awk '{print $3}' | head -n 1)
  echo "Downloading sudo..."
  curl -o /usr/src/sudo-$SUDO_VERSION.tar.gz https://www.sudo.ws/dist/sudo-$SUDO_VERSION.tar.gz
  if [ $? -ne 0 ]; then
    echo "Error: Failed to download sudo."
    exit 1
  fi
  echo "Untarring sudo..."
  tar xvf /usr/src/sudo-$SUDO_VERSION.tar.gz -C /usr/src/
  if [ $NO_COMPILE -eq 0 ]; then
    echo "Preparing to build sudo..."
    cd /usr/src/sudo-$SUDO_VERSION
    ./configure
    echo "Building sudo..."
    make
    if [ $? -ne 0 ]; then
      echo "Error: Failed to build sudo."
      exit 1
    fi
    echo "Installing sudo..."
    make install
    echo "Cleaning up..."
    rm -rvf /usr/src/sudo-$SUDO_OLD
    rm -f /usr/src/sudo-$SUDO_VERSION.tar.gz
  else
    echo "--no-compile parameter specified. Not installing sudo."
  fi
else
  if [ $BINARY_ONLY -eq 0 ]; then
    echo "sudo is up to date."
  fi
fi
# Does sysvinit need to be updated?

if [ $BINARY_ONLY -eq 0 ] && ! init --version | grep -q $SYSVINIT_VERSION || [ $FORCE_DOWNGRADE -eq 1 ]; then
  SYSVINIT_OLD=$(init --version | awk '{print $4}' | head -n 1)
  echo "Downloading sysvinit..."
  wget --no-cookies -O /usr/src/sysvinit-$SYSVINIT_VERSION.tar.xz https://github.com/slicer69/sysvinit/releases/download/$SYSVINIT_VERSION/sysvinit-$SYSVINIT_VERSION.tar.xz
  if [ $? -ne 0 ]; then
    echo "Error: Failed to download sysvinit."
    exit 1
  fi
  echo "Untarring sysvinit..."
  tar xvf /usr/src/sysvinit-$SYSVINIT_VERSION.tar.xz -C /usr/src/
  if [ $NO_COMPILE -eq 0 ]; then
    echo "Building sysvinit..."
    cd /usr/src/sysvinit-$SYSVINIT_VERSION
    make
    echo "Installing sysvinit..."
    make install
    echo "Cleaning up..."
    rm -rvf /usr/src/sysvinit-$SYSVINIT_OLD
    rm -f /usr/src/sysvinit-$SYSVINIT_VERSION.tar.xz
    REQUEST_REBOOT=1
  else
    echo "--no-compile option specified. Not installing sysvinit."
  fi
else
  if [ $BINARY_ONLY -eq 0 ]; then
    echo "sysvinit is up to date."
  fi
fi
# Does debtoo-scripts need to be updated?
if [ $BINARY_ONLY -eq 0 ] && [ $REAL_VERSION != $DEBTOO_SCRIPTS_VERSION ] || [ $FORCE_DOWNGRADE -eq 1 ]; then
  echo "Downloading debtoo-scripts..."
  wget --no-cookies -O /tmp/debtoo-scripts-$DEBTOO_SCRIPTS_VERSION.tar.gz https://github.com/ntvmb/debtoo-scripts/archive/refs/tags/v$DEBTOO_SCRIPTS_VERSION.tar.gz
  if [ $? -ne 0 ]; then
    echo "Error: Failed to download debtoo-scripts."
    exit 1
  fi
  tar xvf /tmp/debtoo-scripts-$DEBTOO_SCRIPTS_VERSION.tar.gz -C /tmp
  if [ $NO_COMPILE -eq 0 ]; then
    echo "Installing debtoo-scripts..."
    cp /tmp/debtoo-scripts-$DEBTOO_SCRIPTS_VERSION/* /bin
    echo "Cleaning up..."
    rm -rvf /tmp/debtoo-scripts-*
    rm -f /bin/README.md
    rm -f /bin/LICENSE
    rm -f /bin/srcpackagelist-*
    rm -f /bin/UPGRADING.md
    rm -f /bin/dist-list
    chmod 755 /bin/*
  else
    echo "--no-compile parameter specified. Not installing debtoo-scripts."
  fi
else
  if [ $BINARY_ONLY -eq 0 ]; then
    echo "debtoo-scripts is up to date."
  fi
fi
if [ $REQUEST_DIST_UPGRADE -eq 1 ]; then
  echo "One or more binary packages have been kept back. Try running 'debtoo-dist-upgrade' as root or via sudo to correct this."
fi
if [ $REQUEST_REBOOT -eq 1 ] && [ $NO_REBOOT -eq 0 ]; then
  echo "One of your source packages that was updated requested for a reboot. It is recommended that you do so before running update-debtoo again."
  read -ep 'Would you like to reboot now? (Y/n) ' ANS
  case $ANS in
    Y|y)
      echo Rebooting...
      /sbin/reboot
      ;;
    *)
      # Do nothing
      ;;
  esac
fi
echo Done
